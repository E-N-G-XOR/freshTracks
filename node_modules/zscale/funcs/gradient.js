'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Utils = require('./../utils');
var d3 = require('d3-scale');
var getDomain = Utils.getDomain,
    getRange = Utils.getRange;

var funcs = {
	log: d3.scaleLog,
	pow: d3.scalePow,
	linear: d3.scaleLinear
};

var checkType = function checkType(d, valueType) {
	if (!d) return false;
	if (valueType === 'gradient') return true;
	if ((typeof d === 'undefined' ? 'undefined' : _typeof(d)) !== 'object') return false;
	var type = d.type || valueType;
	var value = d.type ? d.value : d;
	if (type !== 'gradient') return false;
	if (!value || !value.range || !value.domain) return false;
	return true;
};

var getFunc = function getFunc(o) {
	var type = o.easing || o.scale || 'linear';
	if (!type) return console.log(o, 'easing参数不存在');
	var func = funcs[type];
	if (!func) return console.log(o, '函数不存在');
	return func;
};

var genFloorBy = function genFloorBy(k, len) {
	if (!k) return function (d) {
		return d;
	};
	k = len / k;
	return function (d) {
		return Math.floor(d / k) * k;
	};
};

var generate = function generate(o) {
	var d3Func = getFunc(o);
	var domain = getDomain(o);
	var dLen = domain[1] - domain[0];
	var floorBy = genFloorBy(o.domain.divideN, dLen);
	var range = getRange(o);
	var func = d3Func().domain(domain).range(range).clamp(domain);
	return function (d) {
		return func(floorBy(d));
	};
};

module.exports = { generate: generate, checkType: checkType };