{"remainingRequest":"/Users/benjasl/Desktop/gitHub/freshTracks/node_modules/babel-loader/lib/index.js!/Users/benjasl/Desktop/gitHub/freshTracks/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/benjasl/Desktop/gitHub/freshTracks/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/benjasl/Desktop/gitHub/freshTracks/src/components/Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/benjasl/Desktop/gitHub/freshTracks/src/components/Map.vue","mtime":1585600488622},{"path":"/Users/benjasl/Desktop/gitHub/freshTracks/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/benjasl/Desktop/gitHub/freshTracks/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/benjasl/Desktop/gitHub/freshTracks/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/benjasl/Desktop/gitHub/freshTracks/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/benjasl/Desktop/gitHub/freshTracks/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { latLng } from \"leaflet\";\nimport 'leaflet-gpx';\nimport { LMap, LTileLayer, LMarker, LPopup, LTooltip } from \"vue2-leaflet\";\nimport axios from 'axios';\nrequire;\nexport default {\n  components: {\n    LMap: LMap,\n    LTileLayer: LTileLayer,\n    LMarker: LMarker,\n    LPopup: LPopup,\n    LTooltip: LTooltip\n  },\n  data: function data() {\n    return {\n      //initializeGPXData//\n      gpxfile: \"\",\n      toggle: false,\n      elevation: 0,\n      heartrate: 0,\n      temp: 0,\n      evevationGain: 0,\n      elevationLoss: 0,\n      averageSpeed: 0,\n      totalTime: 0,\n      startTime: 0,\n      endTime: 0,\n      distance: 0,\n      name: \"\",\n      //buildMap//\n      url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n      attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n      currentZoom: 4.5,\n      showParagraph: false,\n      mapOptions: {\n        zoomSnap: 0.5\n      },\n      showMap: false\n    };\n  },\n  methods: {\n    zoomUpdate: function zoomUpdate(zoom) {\n      this.currentZoom = zoom;\n    },\n    centerUpdate: function centerUpdate(center) {\n      this.currentCenter = 'gpx.getBounds().getCenter()';\n    },\n    showLongText: function showLongText() {\n      this.showParagraph = !this.showParagraph;\n    },\n    innerClick: function innerClick() {\n      alert(\"Click!\");\n    },\n    revealMap: function revealMap() {\n      this.showMap = true;\n    },\n    drawMap: function () {\n      var _drawMap = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var self, token, mapObject;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                self = this;\n                _context.next = 3;\n                return self.$auth.getTokenSilently();\n\n              case 3:\n                token = _context.sent;\n                mapObject = this.$refs.myMap.mapObject;\n                axios({\n                  method: \"GET\",\n                  headers: {\n                    Authorization: \"Bearer \".concat(token)\n                  },\n                  url: process.env.VUE_APP_APIGW_URL + '/activity',\n                  params: {\n                    \"ID\": this.$route.query.ID\n                  }\n                }).then(function (response) {\n                  _this.success = 'Data retrieved successfully'; //this.response = JSON.stringify(response, null, 2)\n\n                  self.gpxfile = response.data;\n                  var track = new L.GPX(self.gpxfile, {\n                    async: true,\n                    gpx_options: {\n                      parseElements: ['track', 'route', 'waypoint'],\n                      joinTrackSegments: false\n                    },\n                    polyline_options: {\n                      opacity: 0.55,\n                      weight: 4,\n                      lineCap: 'round'\n                    },\n                    marker_options: {\n                      wptIconUrls: {\n                        '': 'icons/map/005-pin-1.png',\n                        'Geocache Found': 'img/gpx/geocache.png',\n                        'Park': 'img/gpx/tree.png'\n                      },\n                      startIconUrl: 'icons/map/005-pin-1.png',\n                      endIconUrl: 'icons/map/024-flag.png',\n                      shadowUrl: ''\n                    }\n                  });\n                  track.on('loaded', function (e) {\n                    var gpx = e.target;\n                    mapObject.fitBounds(gpx.getBounds());\n                    self.name = gpx.get_name();\n                    self.elevation = gpx.get_elevation_max().toFixed(0);\n                    self.heartrate = gpx.get_average_hr().toFixed(2);\n                    self.temp = gpx.get_average_temp().toFixed(2);\n                    self.elevationLoss = gpx.get_elevation_loss().toFixed(0);\n                    self.averageSpeed = gpx.get_moving_speed().toFixed(2);\n                    self.totalTime = gpx.get_duration_string_iso(gpx.get_total_time());\n                    self.startTime = gpx.get_start_time();\n                    self.endTime = gpx.get_end_time();\n                    self.distance = gpx.get_distance().toFixed(2);\n                    gpx.showMap = true;\n                  });\n                  track.addTo(mapObject);\n                  var layer = new L.TileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png');\n                  mapObject.addLayer(layer);\n                }).catch(function (error) {\n                  _this.response = 'Error: ' + error.response.status;\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function drawMap() {\n        return _drawMap.apply(this, arguments);\n      }\n\n      return drawMap;\n    }()\n  },\n  mounted: function mounted() {\n    this.drawMap();\n  }\n};",{"version":3,"sources":["Map.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div class=\"container\">\n    <div class=\"row align-items-top\">\n        <div style=\"col-md-12 height:500px; min-width: 100%; \"  >\n          <h3>\n            {{name}}\n          </h3>\n          <l-map style=\"height:500px;\" ref=\"myMap\"\n            :zoom=\"14\"\n            \n            :options=\"mapOptions\"\n            @update:center=\"centerUpdate\"\n            @update:zoom=\"zoomUpdate\"\n          >\n            <l-tile-layer\n              :url=\"url\"\n              :attribution=\"attribution\"\n            />\n\n          </l-map>\n        </div>\n      </div>\n        <div v-if=\"name\" id=\"meta\">\n            <table style=\"width:100%; border:0px\">\n              <tr>\n                <td style=\"\">\n                  \n                      <h3 v-if=\"distance > 0\">Total Distance</h3>\n                      <p v-if=\"distance >0\" class=\"stat\">{{Math.round(distance/1000).toFixed(2)}} KM</p>\n\n                </td>\n                <td style=\"\">\n                      <h3 v-if=\"elevation > 0\">Total Elevation</h3>\n                      <p v-if=\"elevation > 0\" class=\"stat\">{{elevation}} M</p>\n                </td>\n              </tr>\n              <tr>\n                <td style=\"\">\n                      <h3 v-if=\"elevationLoss > 0\">Verticle Skied</h3>\n                      <p v-if=\"elevationLoss > 0\" class=\"stat\">{{elevationLoss}} M</p>\n                </td>\n                <td style=\"\">\n                      <h3 v-if=\"averageSpeed > 0\">Average Speed</h3>\n                      <p v-if=\"averageSpeed > 0\" class=\"stat\">{{averageSpeed}} KM/H</p>\n                </td>\n                <td style=\"\">\n                      <h3 v-if=\"totalTime > 0\">Moving Time</h3>\n                      <p v-if=\"totalTime > 0\" class=\"stat\">{{totalTime}}</p>\n                </td>\n              </tr>\n            </table>\n          \n            <p v-if=\"heartrate > 0\"> <img class=\"mb-1 icon xs\" src=\"/icons/map/030-route.png\" alt=\"Fresh tracks\"/>  Avg Heartrate: {{heartrate}}</p>\n            <hr v-if=\"heartrate > 0\" />\n            <p v-if=\"temp > 0\"> <img class=\"mb-1 icon xs\" src=\"/icons/map/030-route.png\" alt=\"Fresh tracks\"/>  Avg Temp: {{temp}} </p>\n            <hr v-if=\"temp > 0\" />\n        </div>\n      </div>\n  \n</template>\n\n<script>\nimport { latLng } from \"leaflet\";\nimport 'leaflet-gpx';\n\nimport { LMap, LTileLayer, LMarker, LPopup, LTooltip } from \"vue2-leaflet\";\nimport axios from 'axios';\nrequire \n\n\nexport default {\n  components: {\n    LMap,\n    LTileLayer,\n    LMarker,\n    LPopup,\n    LTooltip\n  },\n  data() {\n    return {\n      //initializeGPXData//\n      gpxfile:\"\",\n      toggle:false,\n      elevation: 0, \n      heartrate: 0,\n      temp: 0,\n      evevationGain:0,\n      elevationLoss:0,\n      averageSpeed:0,\n      totalTime:0,\n      startTime:0,\n      endTime:0,\n      distance:0,\n      name:\"\",\n\n      //buildMap//\n  \n      url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n      attribution:\n        '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n      currentZoom: 4.5,\n      showParagraph: false,\n      mapOptions: {\n        zoomSnap: 0.5\n      },\n      showMap: false\n    };\n  },\n  methods: {\n    zoomUpdate(zoom) {\n      this.currentZoom = zoom;\n    },\n    centerUpdate(center) {\n      this.currentCenter = 'gpx.getBounds().getCenter()';\n    },\n    showLongText() {\n      this.showParagraph = !this.showParagraph;\n    },\n    innerClick() {\n      alert(\"Click!\");\n    },\n    revealMap(){\n      this.showMap=true\n    },\n    async drawMap(){\n        var self = this\n        const token =  await self.$auth.getTokenSilently()\n        let mapObject = this.$refs.myMap.mapObject\n      \n          axios({\n            method: \"GET\",\n            headers:{ Authorization: `Bearer ${token}` } ,  \n            url: process.env.VUE_APP_APIGW_URL+'/activity',\n            params:{\"ID\": this.$route.query.ID},\n\n          }).then(response => {\n\n              this.success = 'Data retrieved successfully';\n            //this.response = JSON.stringify(response, null, 2)\n              self.gpxfile = response.data\n\n            const track = new L.GPX(self.gpxfile, \n              { async: true,\n                gpx_options:{\n                  parseElements: ['track', 'route', 'waypoint'],\n                  joinTrackSegments: false,\n                },\n                  polyline_options: {\n                  opacity: 0.55,\n                  weight: 4,\n                  lineCap: 'round'\n                },\n                marker_options: {\n                  wptIconUrls: {\n                      '': 'icons/map/005-pin-1.png',\n                      'Geocache Found': 'img/gpx/geocache.png',\n                      'Park': 'img/gpx/tree.png'\n                    },\n                  startIconUrl: 'icons/map/005-pin-1.png',\n                  endIconUrl: 'icons/map/024-flag.png',\n                  shadowUrl: ''\n                }\n              })\n              track.on('loaded', function (e) {\n              var gpx = e.target;\n                  mapObject.fitBounds(gpx.getBounds());\n                  self.name= gpx.get_name()\n                  self.elevation = gpx.get_elevation_max().toFixed(0)\n                  self.heartrate= gpx.get_average_hr().toFixed(2)\n                  self.temp= gpx.get_average_temp().toFixed(2)\n                  self.elevationLoss= gpx.get_elevation_loss().toFixed(0)\n                  self.averageSpeed= gpx.get_moving_speed().toFixed(2)\n                  self.totalTime= gpx.get_duration_string_iso(gpx.get_total_time())\n                  self.startTime= gpx.get_start_time();\n                  self.endTime= gpx.get_end_time();\n                  self.distance = gpx.get_distance().toFixed(2)\n                    gpx.showMap= true\n            })\n            track.addTo(mapObject)\n          \n            var layer = new L.TileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png');\n            mapObject.addLayer(layer);\n\n        }).catch(error => {\n          \n            this.response = 'Error: ' + error.response.status\n          })\n            \n    }\n\n  },\n  mounted(){\n    \n    this.drawMap()\n    \n  }\n  \n};\n</script>\n\n\n<style scoped>\n#meta{padding:10px; background: #fff;}\n.icon.xs{max-width: 40px; display: inline;}\n.icon.sm{max-width: 80px; display: inline;}\nh3{font-style: italic; font-weight: 100;;}\n.stat{font-weight: 900;}\nh3{font-size:1rem;}\n</style>"],"sourceRoot":"src/components"}]}