"use strict";function t(t,s,h,o){var a,f,l;for(this.heatmap=t,this.gl=s,this.width=h,this.height=o,this.shader=new n(this.gl,{vertex:"attribute vec4 position, intensity;\nvarying vec2 off, dim;\nvarying float vIntensity;\nuniform vec2 viewport;\n\nvoid main(){\n    dim = abs(position.zw);\n    off = position.zw;\n    vec2 pos = position.xy + position.zw;\n    vIntensity = intensity.x;\n    gl_Position = vec4((pos/viewport)*2.0-1.0, 0.0, 1.0);\n}",fragment:"#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp int;\n    precision highp float;\n#else\n    precision mediump int;\n    precision mediump float;\n#endif\nvarying vec2 off, dim;\nvarying float vIntensity;\nvoid main(){\n    float falloff = (1.0 - smoothstep(0.0, 1.0, length(off/dim)));\n    float intensity = falloff*vIntensity;\n    gl_FragColor = vec4(intensity);\n}"}),this.clampShader=new n(this.gl,{vertex:e,fragment:i+"uniform float low, high;\nvoid main(){\n    gl_FragColor = vec4(clamp(texture2D(source, texcoord).rgb, low, high), 1.0);\n}"}),this.multiplyShader=new n(this.gl,{vertex:e,fragment:i+"uniform float value;\nvoid main(){\n    gl_FragColor = vec4(texture2D(source, texcoord).rgb*value, 1.0);\n}"}),this.blurShader=new n(this.gl,{vertex:e,fragment:i+"uniform vec2 viewport;\nvoid main(){\n    vec4 result = vec4(0.0);\n    for(int x=-1; x<=1; x++){\n        for(int y=-1; y<=1; y++){\n            vec2 off = vec2(x,y)/viewport;\n            //float factor = 1.0 - smoothstep(0.0, 1.5, length(off));\n            float factor = 1.0;\n            result += vec4(texture2D(source, texcoord+off).rgb*factor, factor);\n        }\n    }\n    gl_FragColor = vec4(result.rgb/result.w, 1.0);\n}"}),this.nodeBack=new r(this.gl,this.width,this.height),this.nodeFront=new r(this.gl,this.width,this.height),this.vertexBuffer=this.gl.createBuffer(),this.vertexSize=8,this.maxPointCount=10240,this.vertexBufferData=new Float32Array(this.maxPointCount*this.vertexSize*6),this.vertexBufferViews=[],a=f=0,l=this.maxPointCount;l>=0?l>f:f>l;a=l>=0?++f:--f)this.vertexBufferViews.push(new Float32Array(this.vertexBufferData.buffer,0,a*this.vertexSize*6));this.bufferIndex=0,this.pointCount=0}var e=require("./vertexShaderBlit"),i=require("./fragmentShaderBlit"),r=require("./node"),n=require("./shader");t.prototype.resize=function(t,e){return this.width=t,this.height=e,this.nodeBack.resize(this.width,this.height),this.nodeFront.resize(this.width,this.height)},t.prototype.update=function(){var t,e;return this.pointCount>0?(this.gl.enable(this.gl.BLEND),this.nodeFront.use(),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.vertexBuffer),this.gl.bufferData(this.gl.ARRAY_BUFFER,this.vertexBufferViews[this.pointCount],this.gl.STREAM_DRAW),e=this.shader.attribLocation("position"),t=this.shader.attribLocation("intensity"),this.gl.enableVertexAttribArray(1),this.gl.vertexAttribPointer(e,4,this.gl.FLOAT,!1,32,0),this.gl.vertexAttribPointer(t,4,this.gl.FLOAT,!1,32,16),this.shader.use().vec2("viewport",this.width,this.height),this.gl.drawArrays(this.gl.TRIANGLES,0,6*this.pointCount),this.gl.disableVertexAttribArray(1),this.pointCount=0,this.bufferIndex=0,this.nodeFront.end(),this.gl.disable(this.gl.BLEND)):void 0},t.prototype.clear=function(){return this.nodeFront.use(),this.gl.clearColor(0,0,0,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.nodeFront.end()},t.prototype.clamp=function(t,e){return this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.heatmap.quad),this.gl.vertexAttribPointer(0,4,this.gl.FLOAT,!1,0,0),this.nodeFront.bind(0),this.nodeBack.use(),this.clampShader.use()["int"]("source",0)["float"]("low",t)["float"]("high",e),this.gl.drawArrays(this.gl.TRIANGLES,0,6),this.nodeBack.end(),this.swap()},t.prototype.multiply=function(t){return this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.heatmap.quad),this.gl.vertexAttribPointer(0,4,this.gl.FLOAT,!1,0,0),this.nodeFront.bind(0),this.nodeBack.use(),this.multiplyShader.use()["int"]("source",0)["float"]("value",t),this.gl.drawArrays(this.gl.TRIANGLES,0,6),this.nodeBack.end(),this.swap()},t.prototype.blur=function(){return this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.heatmap.quad),this.gl.vertexAttribPointer(0,4,this.gl.FLOAT,!1,0,0),this.nodeFront.bind(0),this.nodeBack.use(),this.blurShader.use()["int"]("source",0).vec2("viewport",this.width,this.height),this.gl.drawArrays(this.gl.TRIANGLES,0,6),this.nodeBack.end(),this.swap()},t.prototype.swap=function(){var t;return t=this.nodeFront,this.nodeFront=this.nodeBack,this.nodeBack=t},t.prototype.addVertex=function(t,e,i,r,n){return this.vertexBufferData[this.bufferIndex++]=t,this.vertexBufferData[this.bufferIndex++]=e,this.vertexBufferData[this.bufferIndex++]=i,this.vertexBufferData[this.bufferIndex++]=r,this.vertexBufferData[this.bufferIndex++]=n,this.vertexBufferData[this.bufferIndex++]=n,this.vertexBufferData[this.bufferIndex++]=n,this.vertexBufferData[this.bufferIndex++]=n},t.prototype.addPoint=function(t,e,i,r){var n;return null==i&&(i=50),null==r&&(r=.2),this.pointCount>=this.maxPointCount-1&&this.update(),e=this.height-e,n=i/2,this.addVertex(t,e,-n,-n,r),this.addVertex(t,e,+n,-n,r),this.addVertex(t,e,-n,+n,r),this.addVertex(t,e,-n,+n,r),this.addVertex(t,e,+n,-n,r),this.addVertex(t,e,+n,+n,r),this.pointCount+=1},module.exports=t;